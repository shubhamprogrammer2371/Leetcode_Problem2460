/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* applyOperations(int* nums, int numsSize, int* returnSize) {
    int *ans = calloc(numsSize,sizeof(int));
    *returnSize = 0;
    for( int i = 0 ; i < numsSize-1 ; i++)
    {
        if(nums[i] == nums[i+1])
        {
            nums[i] *= 2;
            nums[i+1] = 0;
        }
    }
    for( int i = 0 ; i < numsSize ; i++)
        if(nums[i])
            ans[(*returnSize)++] = nums[i];
    *returnSize += numsSize - *returnSize;
    return ans;
}


--------------------------------------------------------------------------------------------------------------------------------------------


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* applyOperations(int* nums, int numsSize, int* returnSize){
    int i , *ans = calloc(numsSize, sizeof(int));
    *returnSize = 0;
    while (i < numsSize - 1) 
    {
        if (!nums[i]) 
        {
            i++;
            continue;
        }
        if (!(nums[i] ^ nums[i+1])) 
        {
            ans[(*returnSize)++] = nums[i] * 2;
            i += 2;
        } 
        else 
            ans[(*returnSize)++] = nums[i++];
    }
    ans[*returnSize] = nums[numsSize-2] == nums[numsSize-1] ? 0 : nums[numsSize-1];
    *returnSize += numsSize - *returnSize;
    return ans;
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* applyOperations(int* nums, int numsSize, int* returnSize){
    int *result = malloc(sizeof(int) * numsSize) , resultIndex = 0;
    for (int index = 0; index < numsSize; index++)
    {
        result[index] = 0;
        if ((index + 1 < numsSize) && (nums[index] == nums[index+1]))
        {
            nums[index] = nums[index] * 2;
            nums[index+1] = 0;
        }        
    }
    for (int index = 0; index < numsSize; index++)
        if (nums[index])
            result[resultIndex++] = nums[index];
    *returnSize = numsSize;
    return result;
}
